if (ca_precip3_data$count==0) warning("No results returned from query")
## List names and URLs returned
sapply(ca_precip3_data$results, function(x) x$slug)
source('C:/GitHub/ecoengine/ecoengine-master/R/ee_observations.R')
Artemisia <- ee_observations(scientific_name = "Artemisia douglasiana")
getwd()
repo_uri <- "file:///c:/r_setup/packages"
file.exists(repo_uri)
ecoengine_scripts <- list.files(path="/GitHub/ecoengine/ecoengine-master/R/", pattern=".R$")
ecoengine_scripts
?list.files
(ecoengine_scripts <- list.files(path="/GitHub/ecoengine/ecoengine-master/R/", pattern=".R$", full.names=TRUE))
source(ecoengine_scripts)
?source
sapply(ecoengine_scripts, source)
invisible(sapply(ecoengine_scripts, source))
Artemisia <- ee_observations(scientific_name = "Artemisia douglasiana")
(pkgs_missing <- pkgs_req[!sapply(pkgs_req, function(p) require(p, character.only=T))])
Artemisia <- ee_observations(scientific_name = "Artemisia douglasiana")
?warn_for_status
httr::warn_for_status(x, task = NULL)
source('C:/GitHub/ecoengine/ecoengine-master/R/ee_observations.R')
source('C:/GitHub/ecoengine/ecoengine-master/R/ee_observations.R')
Artemisia <- ee_observations(scientific_name = "Artemisia douglasiana")
source('C:/GitHub/ecoengine/ecoengine-master/R/ee_observations.R')
Artemisia <- ee_observations(scientific_name = "Artemisia douglasiana")
args
obs_url
foptions
httr::modify_url(obs_url, query=args)
names(args)
args_short <- args[c(2)]
httr::modify_url(obs_url, query=args_short)
source('C:/GitHub/ecoengine/ecoengine-master/R/ee_observations.R')
data_sources <- GET(obs_url, query = args_short, foptions)
warn_for_status(data_sources)
?assert_that
assert_that(length(x) == 3)
x
x=3
assert_that(length(x) == 3)
assert_that(ca_precip_data$count > 0)
assert_that(ca_precip_data$count > 0, "No results returned from query")
assert_that(ca_precip_data$count > 0, msg="No results returned from query")
source('C:/GitHub/ecoengine/ecoengine-master/R/ee_observations.R')
obs_data <- content(data_sources, type = "application/json")
page
required_pages <- ee_paginator(page, obs_data$count, page_size = page_size)
required_pages
page_size
obs_data$count
all_the_pages <- ceiling(obs_data$count/page_size)
all_the_pages
quiet
if(!quiet)  message(sprintf("Search contains %s observations (downloading %s of %s pages)", obs_data$count, length(required_pages), all_the_pages))
message(sprintf("Search contains %s observations (downloading %s of %s pages)", obs_data$count, length(required_pages), all_the_pages))
response = requests.get('http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/'
(rs_url <- file.path(ca_base_url, "series/", rs_slug))
#httr::modify_url(url_series_base, query=search_params_lst)
ca_precip3_resp <- httr::GET(url_series_base, query=search_params_lst)
assert_that(ca_precip3_resp$status_code < 400)     ## Stop everything for a return code >400
warn_for_status(ca_precip3_resp, task = "retrieve list of raster series")  ## Give a warning for other things
## Convert response to a list
ca_precip3_data <- httr::content(ca_precip3_resp, type = "application/json")
## Check for no results
ca_precip3_data$count
if (ca_precip3_data$count==0) warning("No results returned from query")
assert_that(ca_precip3_data$count > 0)
)
rs_slug <- "tasmax_year_CNRM-CM5_rcp45"
(rs_url <- file.path(ca_base_url, "series/", rs_slug))
(rs_url <- file.path(ca_base_url, "series", rs_slug, "/"))
(rs_url <- file.path(ca_base_url, "series", rs_slug, "/"))
#httr::modify_url(url_series_base, query=search_params_lst)
rs_resp <- httr::GET(rs_url)
assert_that(rs_resp$status_code < 400)     ## Stop everything for a return code >400
## Convert response to a list
rs_data <- httr::content(rs_resp, type = "application/json")
## Check for no results
rs_data$count
rs_slug <- "tasmax_year_CNRM-CM5_rcp45b"
(rs_url <- file.path(ca_base_url, "series", rs_slug, "/"))
#httr::modify_url(url_series_base, query=search_params_lst)
rs_resp <- httr::GET(rs_url)
assert_that(rs_resp$status_code < 400)     ## Stop everything for a return code >400
assert_that(rs_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
rs_slug <- "tasmax_year_CNRM-CM5_rcp45"
(rs_url <- file.path(ca_base_url, "series", rs_slug, "/"))
#httr::modify_url(url_series_base, query=search_params_lst)
rs_resp <- httr::GET(rs_url)
assert_that(rs_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
names(rs_data)
rs_data$begin
class(rs_data$begin)
require(lubridate)
?lubridate
x <- rs_data$begin
x
strptime(x, format="yyyy")
strptime(x, format="%Y-%m-%d")
strptime(x, format="%Y-%m-%dT%T")
strptime(x, format="%Y-%m-%dT%T", tz="UTC")
x <- "2006-01-01T00:00:00Z"
x <- "2006-01-01T02:30:00Z"
strptime(x, format="%Y-%m-%dT%T", tz="UTC")
strptime(x, format="%Y-%m-%d%T", tz="UTC")
xt <- strptime(x, format="%Y-%m-%dT%T", tz="UTC")
class(xt)
## Convert begin and end values to R objects (POSIXlt)
strptime(rs_data$begin, format="%Y-%m-%dT%T", tz="UTC")
strptime(rs_data$end, format="%Y-%m-%dT%T", tz="UTC")
rs_data$rasters
class(rs_data$rasters)
length(rs_data$rasters)
sapply(rs_data$rasters, function(x) x[1])
(rs_url <- file.path(ca_base_url, "series", rs_slug, "/rasters/"))
rs_slug
(rs_url <- file.path(ca_base_url, "series", rs_slug, "rasters/"))
(rs_url <- file.path(ca_base_url, "series", rs_slug, "rasters", "/"))
(rasts_url <- file.path(ca_base_url, "series", rs_slug, "rasters", "/"))
rs_slug <- "tasmax_year_CNRM-CM5_rcp45"
(rstore_list_url <- file.path(ca_base_url, "series", rs_slug, "rasters", "/"))
rstore_list_resp <- httr::GET(rstore_list_url)
assert_that(rstore_list_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
warn_for_status(rstore_list_resp, task = "retrieve raster series metadata")  ## Give a warning for other things
## Convert response to a list
rstore_list_data <- httr::content(rstore_list_resp, type = "application/json")
names(rstore_list_data)
rstore_list_data$count
class(rstore_list_data$results)
length(rstore_list_data$results)
names(rstore_list_data$results)
class(rstore_list_data$results[[1]])
names(rstore_list_data$results[[1]])
class(rstore_list_data$results[[1]]$image)
rstore_list_data$results[[1]]
rstore_list_data$results[[1]]$image
tif_url <- rstore_list_data$results[[1]]$image
library(sf)
some_img <- st_read(dsn=tif_url)
library(raster)
some_img <- raster::raster(tif_url)
some_img
plot(this_img_ll)
this_img_ll <- some_img
plot(this_img_ll)
names(rstore_list_data$results[[1]])
rstore_list_data$results[[1]]$tileurl
rstore_list_data$results[[1]]$url
rstore_list_data$results[[1]]$id
rstore_list_data$results[[1]]$event
rstore_list_data$results[[1]]$xpixsize
rstore_list_data$results[[1]]$units
## Get the geom (of a raster is the corners)
(tif_bb <- rstore_list_data$results[[1]]$geom)
class(tif_bb)
length(tif_bb)
names(tif_bb)
tif_bb$type
tif_bb_geom <- tif_bb_lst$coordinates
## Get the geom (of a raster is the corners)
(tif_bb_lst <- rstore_list_data$results[[1]]$geom)
class(tif_bb_lst)
length(tif_bb_lst)
names(tif_bb_lst)
tif_bb_lst$type
tif_bb_geom <- tif_bb_lst$cordinates
class(tif_bb_geom)
tif_bb_lst$type
tif_bb_lst$coordinates
class(tif_bb_geom)
tif_bb_lst$coordinates
tif_bb_geom <- tif_bb_lst$cordinates
class(tif_bb_geom)
tif_bb_geom
## Get the geom (of a raster is the corners)
(tif_bb_lst <- rstore_list_data$results[[1]]$geom)
class(tif_bb_lst)
length(tif_bb_lst)
names(tif_bb_lst)
tif_bb_lst$type
tif_bb_lst$coordinates
tif_bb_geom <- tif_bb_lst$coordinates
class(tif_bb_geom)
# Query parameters dict
my_point_lst <- list(type="Point", coordinates=c(-121.4687,38.5938))
# Query parameters dict
my_point_lst <- list(type="Point", coordinates=c(-121.4687,38.5938))
#params_lst <- list(pagesize=10, g={"type":"Point","coordinates":[-121.4687,38.5938]})
params_lst <- list(pagesize=10, g=my_point_lst)
params_lst
# Add HTTP header
headers = {'ContentType': 'json'}
# Query parameters dict
my_point_lst <- list(type="Point", coordinates=c(-121.4687,38.5938))
params_lst <- list(pagesize=10, g=my_point_lst)
params_lst
# Add HTTP header
headers_lst = list('ContentType'='json'}
# Make request
response = requests.get(url, params=params, headers=headers)
############################
## Get the Raster Stores from a Raster Series
rs_slug <- "tasmax_year_CNRM-CM5_rcp45"
(rstore_list_url <- file.path(ca_base_url, "series", rs_slug, "rasters", "/"))
#"http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/rasters/"
rstore_list_resp <- httr::GET(rstore_list_url)
assert_that(rstore_list_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
warn_for_status(rstore_list_resp, task = "retrieve raster series metadata")  ## Give a warning for other things
## Convert response to a list
rstore_list_data <- httr::content(rstore_list_resp, type = "application/json")
?GET
content_type_json()
# Make request
#response = requests.get(url, params=params, headers=headers) #Python code
rs_pt_resp <- httr::GET(base_url, query=params_lst, content_type_json())
params_lst
URLdecode("https://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/rasters/?pagesize=100&g=%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-121.4687%2C38.5938%5D%7D")
coords2json <- function(pt) {
return("{\"type\":\"Point\",\"coordinates\":[-121.4687,38.5938]}")
}
pt <- c(-121.4687,38.5938)
coords2json(pt)
#params_lst <- list(pagesize=10, g={"type":"Point","coordinates":[-121.4687,38.5938]})
params_lst <- list(pagesize=10, g=coords2json(pt))
params_lst
base_url <- 'http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/rasters/'
# Make request
#response = requests.get(url, params=params, headers=headers) #Python code
rs_pt_resp <- httr::GET(base_url, query=params_lst, content_type_json())
class(rs_pt_resp)
assert_that(rs_pt_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
warn_for_status(rs_pt_resp, task = "retrieve data for a point location")  ## Give a warning for other things
## Convert response to a list
rs_pt_data <- httr::content(rs_pt_resp, type = "application/json")
class(rs_pt_data)
length(rs_pt_data)
names(rs_pt_data)
rs_pt_data$count
names(rs_pt_data$results)
length(rs_pt_data$results)
rs_pt_data$results[[1]]
sapply(rs_pt_data$results, function(x) x$image)
coords2json <- function(pt) {
return(paste0("{\"type\":\"Point\",\"coordinates\":[", pt[1], ",", pt[2], "]}")  )
}
pt <- c(-121.4687,38.5938)
coords2json(pt)
#params_lst <- list(pagesize=10, g={"type":"Point","coordinates":[-121.4687,38.5938]})
params_lst <- list(pagesize=10, g=coords2json(pt))
base_url <- 'http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/rasters/'
# Make request
#response = requests.get(url, params=params, headers=headers) #Python code
rs_pt_resp <- httr::GET(base_url, query=params_lst, content_type_json())
class(rs_pt_resp)
assert_that(rs_pt_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
## Convert response to a list
rs_pt_data <- httr::content(rs_pt_resp, type = "application/json")
class(rs_pt_data)
length(rs_pt_data)
rs_pt_data$count
class(rs_pt_data)
length(rs_pt_data)
names(rs_pt_data)
sapply(rs_pt_data$results, function(x) x$image)
library(sf)
?sf
st_as_text(st_point(1:2))
st_as_text(st_point(pt))
params_lst <- list(pagesize=10, g=sf::st_as_text(st_point(pt)))
(params_lst <- list(pagesize=10, g=sf::st_as_text(st_point(pt))))
base_url <- 'http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/rasters/'
# Make request
rs_pt2_resp <- httr::GET(base_url, query=params_lst, content_type_json())
class(rs_pt2_resp)
assert_that(rs_pt2_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
warn_for_status(rs_pt2_resp, task = "retrieve data for a point location")  ## Give a warning for other things
## Convert response to a list
rs_pt2_data <- httr::content(rs_pt2_resp, type = "application/json")
rs_pt2_data$count
sapply(rs_pt2_data$results, function(x) x$image)
class(rs_pt2_data)
length(rs_pt2_data)
names(rs_pt2_data)
length(rs_pt2_data$results)
URLdecode("https://api.cal-adapt.org/api/counties/?intersects=%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-121.4687%2C38.5938%5D%7D&srs=4326&simplify=0.0001&precision=4")
paste0(base_url, "counties/")
paste0(ca_base_url, "counties/")
file.path(ca_base_url, "counties/")
(base_url <- file.path(ca_base_url, "counties", "/"))
# Make request
counties_resp <- httr::GET(base_url, content_type_json())
class(counties_resp)
assert_that(counties_resp$status_code < 400, msg="Server returned an error code. Check your request.")     ## Stop everything for a return code >400
## Convert response to a list
counties_data <- httr::content(counties_resp, type = "application/json")
counties_data$count
names(counties_data)
class(counties_data$features )
length(counties_data$features)
class(counties_data$features[[1]])
names(counties_data$features[[1]])
class(counties_data$features[[1]]$geometry)
counties_data$features[[1]]$type
counties_data$features[[1]]$id
names(counties_data$features[[1]]$properties))
names(counties_data$features[[1]]$properties)
class(counties_data$features[[1]]$geometry)
length(counties_data$features[[1]]$geometry)
names(counties_data$features[[1]]$geometry)
counties_data$features[[1]]$geometry$type
counties_data$features[[1]]$geometry$coordinates
st_as_sf(counties_data$features)
library(geojsonsf)
install.packages("geojsonsf")
library(geojsonsf)
x <- geojson_sf(counties_data)
x <- geojson_sf(counties_data$features)
x <- geojson_sf(counties_data$features[[1]])
x <- geojson_sf(counties_data$features[[1]]$geometry)
x <- geojson_sf(counties_data$features[[1]]$geometry$coordinates)
View(counties_resp)
?content
# Shows raw data which is not structured and readable
counties_data2 <- httr::content(counties_resp, as="text", type = "application/json")
class(counties_data2)
length(counties_data2)
nchar(counties_data2)
# Shows raw data which is not structured and readable
counties_data2_txt <- httr::content(counties_resp, as="text", type = "application/json")
x <- fromJSON(counties_data2_txt)
?fromJSON
class(x)
length(x)
names(x)
names(x$features)
names(x$features$geometry)
names(x$features$geometry$coordinates)
length(x$features$geometry$coordinates)
x$features$geometry$coordinates[[1]]
length(x$features$geometry$coordinates)
y <- as(x$features$geometry$coordinates, "sfc")
y <- as(x$features$geometry$coordinates, "sfc_MULTIPOLYGON")
y <- as(x$features$geometry$coordinates, "sfg")
y <- st_multipolygon, x$features$geometry$coordinates)
y <- st_multipolygon(x$features$geometry$coordinates)
y <- st_multipolygon(x$features$geometry$coordinates[[1]])
y <- st_multipolygon(x$features$geometry$coordinates)
y <- st_multipolygon(x$features$geometry)
class(x$features)
names(x$features)
y <- as(x$features, "sf")
y <- st_as_sf(x$features)
names(x$features)
class(x$features$geometry)
y <- st_as_sf(x$features$geometry)
class(x$features$geometry)
names(x$features$geometry)
st_as_text(st_point(pt))
# Params
#params = {'intersects': point, 'srs': 4326, 'simplify': .0001, 'precision': 4}
(params_lst <- list(intersects=st_as_text(st_point(pt)), srs=4326, simplify=0.0001, precision=4))
(counties_base_url <- file.path(ca_base_url, "counties", "/"))
pt <- c(-121.4687, 38.5938)
# Params
#params = {'intersects': point, 'srs': 4326, 'simplify': .0001, 'precision': 4}
(params_lst <- list(intersects=st_as_text(st_point(pt)), srs=4326, simplify=0.0001, precision=4))
# Request the geometry of the county that intersects this point
county_pt_resp <- httr::GET(counties_base_url, query=params_lst, content_type_json())
## Trap request problems
class(county_pt_resp)
warn_for_status(county_pt_resp, task = "retrieve county layer for a point location")  ## Give a warning for other things
## Convert response to a list
county_pt_data <- httr::content(county_pt_resp, type = "application/json")
county_pt_data$count
names(county_pt_data)
## Construct the URI based on the ID
class(county_pt_data$features)
## Construct the URI based on the ID
names(county_pt_data$features)
length(county_pt_data$features)
class(county_pt_data$features[[1]])
names(county_pt_data$features[[1]])
id <- county_pt_data$features[[1]]$id
(id <- county_pt_data$features[[1]]$id)
(county_uri <- file.path(counties_base_url, id, "/"))
(county_uri <- paste0(counties_base_url, id, "/"))
(params_lst <- list(pagesize=100, ref=county_uri, stat='mean'))
(params_lst <- list(pagesize=100, ref=county_uri, stat='mean'))
rastsers_url <- 'http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/rasters/'
# Request pixels in this county
rast_cty_mean_resp <- httr::GET(rastsers_url, query=params_lst, content_type_json())
## Trap request problems
class(rast_cty_mean_resp)
assert_that(rast_cty_mean_resp$status_code < 400, msg="Server returned an error code. Check your query.")
rast_cty_mean_resp$status_code
(county_uri <- paste0(counties_base_url, id, "/"))
(county_uri <- paste0("/api/counties/", id, "/"))
(county_uri <- paste0("/api/counties/", id, "/")) ## note that can't include http://api...
(params_lst <- list(pagesize=100, ref=county_uri, stat='mean'))
rastsers_url <- 'http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/rasters/'
# Request pixels in this county
rast_cty_mean_resp <- httr::GET(rastsers_url, query=params_lst, content_type_json())
## Trap request problems
class(rast_cty_mean_resp)
assert_that(rast_cty_mean_resp$status_code < 400, msg="Server returned an error code. Check your query.")
warn_for_status(rast_cty_mean_resp, task = "retrieve the mean of the selected county")
## Convert response to a list
rast_cty_mean_data <- httr::content(rast_cty_mean_resp, type = "application/json")
class(rast_cty_mean_data)
length(rast_cty_mean_data)
names(rast_cty_mean_data)
class(rast_cty_mean_data$results)
length(rast_cty_mean_data$results)
names(rast_cty_mean_data$results)
class(rast_cty_mean_data$results[[1]])
names(rast_cty_mean_data$results[[1]])
rast_cty_mean_data$results[[1]]$image
sapply(rast_cty_mean_data$results, function(x) x$imagee)
sapply(rast_cty_mean_data$results, function(x) x$image)
getwd()
yose_bnd <- st_read(dsn="./data/", layer="yose_boundary")
yose_bnd <- st_read(dsn="./data", layer="yose_boundary")
yose_bnd_nad23 <- st_read(dsn="./data", layer="yose_boundary")
names(yose_bnd_nad23)
head(yose_bnd_nad23)
yose_bnd_nad83 <- st_read(dsn="./data", layer="yose_boundary")
head(yose_bnd_nad83)
yose_bnd_wgs84 <- st_transform(yose_bnd_nad83, 4326)
yose_bnd_wgs84
?st_write
st_drivers()
st_write(yose_bnd_wgs84, dsn="./data", layer = "yosemite_bnd", driver="ESRI Shapefile")
st_write(yose_bnd_wgs84, dsn="./data", layer = "yosemite_bnd", driver="ESRI Shapefile")
yose_bnd_wgs84
st_write(yose_bnd_wgs84, dsn="./data", layer="yosemite_bnd", driver="ESRI Shapefile")
st_write(yose_bnd_wgs84, dsn=".", layer="yosemite_bnd", driver="ESRI Shapefile")
st_write(yose_bnd_wgs84, dsn="data", layer="yosemite_bnd", driver="ESRI Shapefile")
st_write(yose_bnd_wgs84, dsn="./data/", layer="yosemite_bnd", driver="ESRI Shapefile")
file.path(getwd(), "data")
st_write(yose_bnd_wgs84, dsn=file.path(getwd(), "data"), layer="yosemite_bnd", driver="ESRI Shapefile")
st_write(yose_bnd_wgs84, dsn=file.path(getwd(), "data"), layer="yosemite_bnd", driver="ESRI Shapefile")
file.path(getwd(), "data")
counties_bnd <- st_read(dsn="./data", layer="CA_counties_ll")
counties_bnd <- st_read(dsn="./data", layer="CA_counties_ll")
yose_bnd_sf <- st_read(dsn="./data", layer="yosemite_bnd")
yose_bnd_sf
yose_bnd_sf$geometry
yose_bnd_sf[,"geometry"]
as.character(yose_bnd_sf[,"geometry"])
x <- (yose_bnd_sf[,"geometry"])
class(x)
x <- st_as_text(yose_bnd_sf)
x <- st_as_text(yose_bnd_sf$geometry[1])
yose_bnd_wkt <- st_as_text(yose_bnd_sf$geometry[1])
class(yose_bnd_wkt)
nchar(yose_bnd_wkt)
?st_simplify
yose_bnd_simp1 <- st_simplify(yose_bnd_sf, dTolerance = 0.001)
plot(yose_bnd_sf, asp=1, col="blue")
plot(st_geometry(yose_bnd_sf), asp=1, col="blue")
plot(st_geometry(yose_bnd_sf), asp=1, border="blue")
plot(st_geometry(yose_bnd_simp1), border="red", add=TRUE)
yose_bnd_simp2 <- st_simplify(yose_bnd_sf, dTolerance = 0.01)
plot(st_geometry(yose_bnd_simp2), border="purple", add=TRUE)
yose_bnd_simp2_wkt <- st_as_text(yose_bnd_simp2$geometry[1])
class(yose_bnd_simp2_wkt)
nchar(yose_bnd_simp2_wkt)
yose_bnd_simp_wkt
## Simplify it to reduce the amount of data that needs to be processed
yose_bnd_simp <- st_simplify(yose_bnd_sf, dTolerance = 0.01)
## Generate the WKT
yose_bnd_simp_wkt <- st_as_text(yose_bnd_simp$geometry[1])
yose_bnd_simp_wkt
(params_lst <- list(pagesize=100, g=yose_bnd_simp_wkt, stat='mean'))
begin_date <- as.Date("2011-09-30")
(begin_date <- as.Date("2011-09-30"))
setwd("C:/GitHub/cal-adapt/caladaptr")
setwd("C:/GitHub/cal-adapt/caladaptr-dev")
(begin_date <- as.Date("2050-01-01"))
(end_date <- as.Date("2060-12-31"))
begin_date < end_date
format(begin_date, "%Y-%m-%d")
(base_url = paste0("http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/", format(begin_date, "%Y-%m-%d"), "/", format(end_date, "%Y-%m-%d"), "/"))
(params_lst <- list(pagesize=100, g=yose_bnd_simp_wkt, stat='mean'))
yose_bnd_simp
yose_bnd_sf <- st_read(dsn="./data", layer="yosemite_bnd")
library(httr)
yose_bnd_sf <- sf::st_read(dsn="./data", layer="yosemite_bnd")
## Simplify it to reduce the amount of data that needs to be processed
## The dTolerance level is in map units, was identified through trial-and-error
yose_bnd_simp <- sf::st_simplify(yose_bnd_sf, dTolerance = 0.01)
## Generate the WKT
yose_bnd_simp_wkt <- sf::st_as_text(yose_bnd_simp$geometry[1])
nchar(yose_bnd_simp_wkt)
(params_lst <- list(pagesize=100, g=yose_bnd_simp_wkt, stat='mean'))
base_url <- 'http://api.cal-adapt.org/api/series/tasmax_year_CNRM-CM5_rcp45/'
(begin_date <- as.Date("2050-01-01"))
(end_date <- as.Date("2060-12-31"))
begin_date < end_date
(begin_end_url = paste0(base_url, format(begin_date, "%Y-%m-%d"), "/", format(end_date, "%Y-%m-%d"), "/"))
# Make request
rast_yosem_resp <- httr::GET(begin_end_url, query=params_lst, content_type_json())
## Check for request errors
class(rast_yosem_resp)
rast_yosem_resp$status_code
## Convert response to a list
rast_yosem_data <- httr::content(rast_yosem_resp, type = "application/json")
names(rast_yosem_data)
rast_yosem_data$count
rast_yosem_data$results[[1]]$image
sapply(rast_yosem_data$results, function(x) x$image)
